6. fix fov of the camera to prevent model stretching to the bottom/top edge when look up/down

7. a map that manage all texture. If the texture is already loaded and assigned a sampler to the shader then skip and don't do it again.
	8. if do this then loop through all the material per part

8. continue with the learning (depth, stencil, shadow, lighting, ...)

*. move ctor for model ?

// --------------------------------------------------------------
transform that overwrite the old value vs transform that that continue from the current model matrix ?


5. add a function to force use custom vertex color, and functions to get color, modifiy color instead of using the material texture coord

recheck for all 4 model constructor and make sure they work
reimplement all function accepting vector or std::array into a pointer and a size_t

2 CAMERA object
1 static (observe the dynamic one)
1 dynamic (the one need to be tested, attach 3 axis onto this camera)

multiplies light object implementation (array of light objects) in a scene

****** add a drawScene() to draw all passed in model as well as their shader (should there be a pointer to a shader in each model by default ? This will prevent addtional draw() function in model.h when drawing)

****** add light_model object, specialized model object for assign uniform light struct variable and other things

************* CREATE A SCENE OBJECT, GET RID OF THE TWO ABOVE

*** test with one light source first, then think of how to deal with multiple light source within a scene (calculate all diffuse/ specular on a fragment and multiply the result together to mix the color ?)
// -------------------

REBIND TEXTURE BECAUSE IF THERE IS ANOTHER OBJECT WITH MATERIAL THEN GLTEXTUREI WILL BE OVERWRITE

~~~~~~~~~~~~~~ REMMEBER TO WRITE DOWN IF LEARN SOMEHTING NEW

	void assignUniformName(gl_program &program){
		program.assignUniform(getUniformName("direction"), glUniform3fv, 1, const_cast<const float*>(glm::value_ptr(direction)));
		program.assignUniform(getUniformName("position"), glUniform3fv, 1, const_cast<const float*>(glm::value_ptr(getPosition())));
		program.assignUniform(getUniformName("color"), glUniform3fv, 1, const_cast<const float*>(glm::value_ptr(light_color)));
		program.assignUniform(getUniformName("inner_cone"), glUniform1f, inner_cone);
		program.assignUniform(getUniformName("outer_cone"), glUniform1f, outer_cone);
	}


Difference between arbitrary_matx = glm::transform_t(arbitrary_matx)
			and arbitrary_matx = glm::transform_T(identity) * arbitrary_matx

should transformation be done with respect to the current object axis/ state or with respect to the original axis/ identity state ?

// --------------------------------------------------------------

vbuf.push_back(mesh.mTextureCoords[0][i].x);
vbuf.push_back(mesh.mTextureCoords[0][i].y);
for mirror ?


implemented
	automatically relink the program after sucessful swapped two shaders
	added a lights pointer to an array of lights for draw()
	added billboard function to model.h to turn a model into a billboard (both 2D and 3D)
	remove fshader member ptr and provide it in draw() instead for easier swapping of fshader
	display fps in the window title instead of cerr
	change the scale(), rotate(), translate() function, got rid of the matx_list, undoAllTransform() and undoLastTransform() functions. Now each model only have one array of matrix of size 3, in the order of scale, rotate and translate to preserve the consistency.

	display current shader id(s) attached after each compileAttachShader() calls

	major overhauld for model.h
	change the loadMaterial(). Now directly load materials using the given model_path str and the assimp::get() function to extract the texture name for each texture that a mesh need.
	remove tex_info
	disallow assigning color to ctor of model
	remove billboardMode to auxFunctions.h keep the model.h maintainability
	remove light_model in draw()
	remove auto assignment of vertex_color in draw()
	change gl_shader ctor to only accept "path", given path should have one of the extension of type .vert, .tesc, .tese, .geom, .frag or .comp
	remove get and assignDirection() in light_model.h, those funcs are already in model.h
	added glGetDebugMessageLog() to display debug
	implemented imgui

Notes and random learnings:
	fragments -> fragment shader -> scissor test -> stencil test -> depth test -> color buffer
																	blending --------|

	ImGui callbacks and learn: everything are in the imgui_impl files and imgui.cpp

	Multi-drawing if (same set of shaders, 1 vao, 1 vbo), different objects
	Instanced drawing if same object multiple times
	Otherwise normal drawing
	Multidrawindirect for to choose either/or multi-draw or instanced
	https://www.reddit.com/r/opengl/comments/9q8t05/instancing_vs_glmultidrawelements/


	Think to remember when dealing with stencilling and depth test
		part are draw independant
	-> can be fixed with batched drawing ?
	-> use one vao (ebo), vbo for dynamic draw
	-> one vao (ebo), vbo for static draw

	Disable depth test spareingly because of the over drawn
	
	BE CAREFUL ABOUT THE OPERANDS' ORDER WHEN APPLYING MATRIX MULTIPLICATION
	Drawn models are only displayed after swapbuffer()
	Do not overwrite the active texture unit of the previously assigned texture name id
	No depth test = no fragment is discarded and most recently drawn object at the top
	Drawn fragment do not manipulate the stencil value, the thing that manipulate the stencil value in the buffer is the StencilOp, which is based on the stencil test (func) and depth test (func)
	Pay attention to the draw() order of the objects
	A bitmask is like a rule for which bit can be modified, the stencil buffer is like the depth buffer (2D array for each pixel), stencil value is 8bit, the bitmask is also 8 bit (00000000 (0x00) disable writting to all bits, 11111111 (0xFF) enable writting to all bits).
	The (ref && mask) is the stencil value that mask over every fragment's stencil value the drawn object, which are then compared to the (buf stencil val && mask) in the stencil buffer for each equivalence fragment
	Learn more about stencil front and back face

	https://community.khronos.org/t/horizontal-vertical-fov-glm-projection-matrix/73854
	Depth test disabled = no write depth buffer + no discard frag (2D)
	cat /proc/<pid of program>/maps it will list where each dynamic library is loaded in the process
	renderdoc failed because of the -fsanitizer=address flag in cmake
	grep -r "string" <path> to find string in path files
	#define GET_VARIABLE_NAME(Variable) (#Variable) to stringify a variable name (ie: const char* str = GET_VARIABLE_NAME(SOME_NAME))
	sudo apt autoremove --purge

	n-d vector into n-array example: vec<vec<int>> v, vec<int*> k, push back v[i].data() into k then do k.data()


TODO:
	remove scene.h ?
	Highlight (outline) object on click (stencil)
	Add billboard letter to the axis (x, y, -z)
	Add an expanded plane in the -z & x plane
	change the axis from model to lines 
		-> init the axis lines and plane, then render them in the while loop with the model
	DO assert(0) instead of std::exit(exit_failure) because std::exit doesn't do any cleanup


WHY MAP NEEDED COPY CTOR FOR GL_OBJECT IF WE ARE USING SHARED_PTR POINTING TO THE GL_OBJECT ?
	test 2 model object with different materail
	test multiple same object without reloading the material if the texture is already loaded

	test multiple light source
	test large number of model rendering
	group all cerr, exception std out into the runtimeerror (make a struct of error each file or put them in the runtimeerror file)
		group all assert to display message

	make the ctor and op= works as intended for model and light_model

	object with different shader that swaped after light uniform is assigned to a model object

	deadly signal thrown when pressed q

	implement an is_directional_light bool in light_model (changing between directional and point light + spotlight)

	assign fshader but don't mess up the uniform (by not link the program ? )

PROJECT GOALS
	Transparent Demo (cube, sphere, triangle,...)
	One cutscene (flying camera, static camera)
	One displaying effects (fire, water, waterfall,..., wind blow tree)
	One displaying shader (different kinds of gems reflection)
	One functional game with UI
